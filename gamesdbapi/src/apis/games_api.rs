/*
 * TheGamesDB API
 *
 * API Documentation
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `games_by_game_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamesByGameIdError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `games_by_game_name`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamesByGameNameError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `games_by_game_name_v1`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamesByGameNameV1Error {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `games_by_platform_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamesByPlatformIdError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `games_images`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamesImagesError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `games_updates`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamesUpdatesError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}


/// can request additional information can be requestes through `fields` and `include` params
pub async fn games_by_game_id(configuration: &configuration::Configuration, apikey: &str, id: &str, fields: Option<&str>, include: Option<&str>, page: Option<i32>) -> Result<crate::models::GamesByGameId, Error<GamesByGameIdError>> {

    let client = &configuration.client;

    let uri_str = format!("{}/v1/Games/ByGameID", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("apikey", &apikey.to_string())]);
    req_builder = req_builder.query(&[("id", &id.to_string())]);
    if let Some(ref s) = fields {
        req_builder = req_builder.query(&[("fields", &s.to_string())]);
    }
    if let Some(ref s) = include {
        req_builder = req_builder.query(&[("include", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if status.is_success() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GamesByGameIdError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// can request additional information can be requestes through `fields` and `include` params
pub async fn games_by_game_name(configuration: &configuration::Configuration, apikey: &str, name: &str, fields: Option<&str>, filter_platform: Option<&str>, include: Option<&str>, page: Option<i32>) -> Result<crate::models::GamesByGameId, Error<GamesByGameNameError>> {

    let client = &configuration.client;

    let uri_str = format!("{}/v1.1/Games/ByGameName", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("apikey", &apikey.to_string())]);
    req_builder = req_builder.query(&[("name", &name.to_string())]);
    if let Some(ref s) = fields {
        req_builder = req_builder.query(&[("fields", &s.to_string())]);
    }
    if let Some(ref s) = filter_platform {
        req_builder = req_builder.query(&[("filter[platform]", &s.to_string())]);
    }
    if let Some(ref s) = include {
        req_builder = req_builder.query(&[("include", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if status.is_success() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GamesByGameNameError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// can request additional information can be requestes through `fields` and `include` params
pub async fn games_by_game_name_v1(configuration: &configuration::Configuration, apikey: &str, name: &str, fields: Option<&str>, filter_platform: Option<&str>, include: Option<&str>, page: Option<i32>) -> Result<crate::models::GamesByGameIdV1, Error<GamesByGameNameV1Error>> {

    let client = &configuration.client;

    let uri_str = format!("{}/v1/Games/ByGameName", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("apikey", &apikey.to_string())]);
    req_builder = req_builder.query(&[("name", &name.to_string())]);
    if let Some(ref s) = fields {
        req_builder = req_builder.query(&[("fields", &s.to_string())]);
    }
    if let Some(ref s) = filter_platform {
        req_builder = req_builder.query(&[("filter[platform]", &s.to_string())]);
    }
    if let Some(ref s) = include {
        req_builder = req_builder.query(&[("include", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if status.is_success() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GamesByGameNameV1Error> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// can request additional information can be requested through `fields` and `include` params
pub async fn games_by_platform_id(configuration: &configuration::Configuration, apikey: &str, id: &str, fields: Option<&str>, include: Option<&str>, page: Option<i32>) -> Result<crate::models::GamesByGameId, Error<GamesByPlatformIdError>> {

    let client = &configuration.client;

    let uri_str = format!("{}/v1/Games/ByPlatformID", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("apikey", &apikey.to_string())]);
    req_builder = req_builder.query(&[("id", &id.to_string())]);
    if let Some(ref s) = fields {
        req_builder = req_builder.query(&[("fields", &s.to_string())]);
    }
    if let Some(ref s) = include {
        req_builder = req_builder.query(&[("include", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if status.is_success() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GamesByPlatformIdError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// results can be filtered with `filter[type]` param
pub async fn games_images(configuration: &configuration::Configuration, apikey: &str, games_id: &str, filter_type: Option<&str>, page: Option<i32>) -> Result<crate::models::GamesImages, Error<GamesImagesError>> {

    let client = &configuration.client;

    let uri_str = format!("{}/v1/Games/Images", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("apikey", &apikey.to_string())]);
    req_builder = req_builder.query(&[("games_id", &games_id.to_string())]);
    if let Some(ref s) = filter_type {
        req_builder = req_builder.query(&[("filter[type]", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if status.is_success() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GamesImagesError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

pub async fn games_updates(configuration: &configuration::Configuration, apikey: &str, last_edit_id: i32, time: Option<i32>, page: Option<i32>) -> Result<crate::models::GamesUpdates, Error<GamesUpdatesError>> {

    let client = &configuration.client;

    let uri_str = format!("{}/v1/Games/Updates", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("apikey", &apikey.to_string())]);
    req_builder = req_builder.query(&[("last_edit_id", &last_edit_id.to_string())]);
    if let Some(ref s) = time {
        req_builder = req_builder.query(&[("time", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if status.is_success() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GamesUpdatesError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

